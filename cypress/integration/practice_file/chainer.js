// Chainer	Example
// not	.should('not.equal', 'Jane')
// 	expect(name).to.not.equal('Jane')
// deep	.should('deep.equal', { name: 'Jane' })
// 	expect(obj).to.deep.equal({ name: 'Jane' })
// nested	.should('have.nested.property', 'a.b[1]')
// 	.should('nested.include', {'a.b[1]': 'y'})
// 	expect({a: {b: 'x'}}).to.have.nested.property('a.b')
// 	expect({a: {b: 'x'}}).to.nested.include({'a.b': 'x'})
// ordered	.should('have.ordered.members', [1, 2])
// 	expect([1, 2]).to.have.ordered.members([1, 2])
// 	expect([1, 2]).not.to.have.ordered.members([2, 1])
// any	.should('have.any.keys', 'age')
// 	expect(arr).to.have.any.keys('age')
// all	.should('have.all.keys', 'name', 'age')
// 	expect(arr).to.have.all.keys('name', 'age')
// a(type)	.should('be.a', 'string')
// Aliases: an	expect('test').to.be.a('string')
// include(value)	.should('include', 2)
// Aliases: contain, includes, contains	expect([1,2,3]).to.include(2)
// ok	.should('not.be.ok')
// 	expect(undefined).to.not.be.ok
// TRUE	.should('be.true')
// 	expect(true).to.be.true
// FALSE	.should('be.false')
// 	expect(false).to.be.false
// null	.should('be.null')
// 	expect(null).to.be.null
// undefined	.should('be.undefined')
// 	expect(undefined).to.be.undefined
// exist	.should('exist')
// 	expect(myVar).to.exist
// empty	.should('be.empty')
// 	expect([]).to.be.empty
// arguments	.should('be.arguments')
// Aliases: Arguments	expect(arguments).to.be.arguments
// equal(value)	.should('equal', 42)
// Aliases: equals, eq	expect(42).to.equal(42)
// deep.equal(value)	.should('deep.equal', { name: 'Jane' })
// 	expect({ name: 'Jane' }).to.deep.equal({ name: 'Jane' })
// eql(value)	.should('eql', { name: 'Jane' })
// Aliases: eqls	expect({ name: 'Jane' }).to.eql({ name: 'Jane' })
// greaterThan(value)	.should('be.greaterThan', 5)
// Aliases: gt, above	expect(10).to.be.greaterThan(5)
// least(value)	.should('be.at.least', 10)
// Aliases: gte	expect(10).to.be.at.least(10)
// lessThan(value)	.should('be.lessThan', 10)
// Aliases: lt, below	expect(5).to.be.lessThan(10)
// most(value)	.should('have.length.of.at.most', 4)
// Aliases: lte	expect('test').to.have.length.of.at.most(4)
// within(start, finish)	.should('be.within', 5, 10)
// 	expect(7).to.be.within(5, 10)
// instanceOf(constructor)	.should('be.instanceOf', Array)
// Aliases: instanceof	expect([1, 2, 3]).to.be.instanceOf(Array)
// property(name, [value])	.should('have.property', 'name')
// 	expect(obj).to.have.property('name')
// deep.property(name, [value])	.should('have.deep.property', 'tests[1]', 'e2e')
// 	expect(deepObj).to.have.deep.property('tests[1]', 'e2e')
// ownProperty(name)	.should('have.ownProperty', 'length')
// Aliases: haveOwnProperty, own.property	expect('test').to.have.ownProperty('length')
// ownPropertyDescriptor(name)	.should('have.ownPropertyDescriptor', 'a')
// Aliases: haveOwnPropertyDescriptor	expect({a: 1}).to.have.ownPropertyDescriptor('a')
// lengthOf(value)	.should('have.lengthOf', 4)
// 	expect('test').to.have.lengthOf(4)
// match(RegExp)	.should('to.match', /^test/)
// Aliases: matches	expect('testing').to.match(/^test/)
// string(string)	.should('have.string', 'test')
// 	expect('testing').to.have.string('test')
// keys(key1, [key2], [...])	.should('have.keys', 'pass', 'fail')
// Aliases: key	expect({ pass: 1, fail: 2 }).to.have.keys('pass', 'fail')
// throw(constructor)	.should('throw', Error)
// Aliases: throws, Throw	expect(fn).to.throw(Error)
// respondTo(method)	.should('respondTo', 'getName')
// Aliases: respondsTo	expect(obj).to.respondTo('getName')
// itself	.should('itself.respondTo', 'getName')
// 	expect(Foo).itself.to.respondTo('bar')
// satisfy(method)	.should('satisfy', (num) => num > 0)
// Aliases: satisfies	expect(1).to.satisfy((num) => num > 0)
// closeTo(expected, delta)	.should('be.closeTo', 1, 0.5)
// Aliases: approximately	expect(1.5).to.be.closeTo(1, 0.5)
// members(set)	.should('include.members', [3, 2])
// 	expect([1, 2, 3]).to.include.members([3, 2])
// oneOf(values)	.should('be.oneOf', [1, 2, 3])
// 	expect(2).to.be.oneOf([1,2,3])
// change(function)	.should('change', obj, 'val')
// Aliases: changes	expect(fn).to.change(obj, 'val')
// increase(function)	.should('increase', obj, 'val')
// Aliases: increases	expect(fn).to.increase(obj, 'val')
// decrease(function)	.should('decrease', obj, 'val')
// Aliases: decreases	expect(fn).to.decrease(obj, 'val')